{"version":3,"sources":["Components/Square.jsx","Components/Board.jsx","Components/Game.jsx","App.js","serviceWorker.js","index.js"],"names":["Square","console","log","className","onClick","this","props","value","Component","Board","i","squares","renderSquare","Game","state","history","stepNumber","isNextX","current","winner","calculateWinner","status","handleClick","getHistoryLinks","newHistory","slice","setState","concat","map","historyObj","index","key","goBackInTime","forEach","line","winnerFound","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.be1e4d43.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n// import \"../index.css\";\r\nclass Square extends Component {\r\n  render() {\r\n    console.log(`Square render called`);\r\n    return (\r\n      <button className=\"square\" onClick={this.props.onClick}>\r\n        {this.props.value}\r\n      </button>\r\n    );\r\n  }\r\n}\r\nexport default Square;\r\n","import React, { Component } from \"react\";\r\nimport Square from \"./Square\";\r\n// import \"../index.css\";\r\nclass Board extends Component {\r\n  //each invoaction of renderSquare will create a new Square component that will be bound to the new function that calls props.onlcikc with i value\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        value={this.props.squares[i]}\r\n        onClick={() => {\r\n          console.log(`onClick for square ${i}`);\r\n          this.props.onClick(i);\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    console.log(`Board render called`);\r\n    return (\r\n      <div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Board;\r\n","import React, { Component } from \"react\";\r\nimport Board from \"./Board\";\r\n// import \"../index.css\";\r\nclass Game extends Component {\r\n  state = {\r\n    history: [\r\n      {\r\n        squares: [null, null, null, null, null, null, null, null, null, null],\r\n      },\r\n    ],\r\n    stepNumber: 0,\r\n    isNextX: true,\r\n  };\r\n  /**\r\n   * renders the Game Component\r\n   */\r\n  render() {\r\n    \r\n    const current = this.state.history[this.state.stepNumber].squares;\r\n    let winner = this.calculateWinner(current);\r\n    console.log(`Game render called ${current} ${winner}`);\r\n    const status = winner\r\n      ? `The winner is ${winner}`\r\n      : `Next player - ${this.state.isNextX ? \"X\" : \"0\"}`;\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current}\r\n            onClick={(i) => {\r\n                console.log(`onClick for Board ${i}`);\r\n              this.handleClick(i); //finally handleClick needs to be called from a place where this is bound the Game Component object\r\n            }}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ol>{this.getHistoryLinks()}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  /**\r\n   * handles click events on a square with index i by taking a copy of history upto stepNumber modifying the history at stepnumber if there is no winner yet and the square is blank\r\n   * updates the state with the new history new stepnumber and the new value of isNextX\r\n   */\r\n  handleClick(i) {\r\n    console.log(`handleClick ${i}`);\r\n    const newHistory = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = this.state.history[this.state.stepNumber].squares.slice();\r\n    if (this.calculateWinner(current) || current[i]) return;\r\n    current[i] = this.state.isNextX ? \"X\" : \"0\";\r\n    this.setState({\r\n      history: newHistory.concat([{ squares: current }]),\r\n      stepNumber: this.state.stepNumber + 1,\r\n      isNextX: !this.state.isNextX,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * creates list of history links for each element of history binds to each list element a function that sets the current stepNumber to that list element's corresponding history index\r\n   */\r\n  getHistoryLinks() {\r\n    return this.state.history.map((historyObj, index) => {\r\n      return (\r\n        <li\r\n          key={index}\r\n          onClick={() => {\r\n            this.goBackInTime(index);\r\n          }}\r\n        >\r\n          {index ? `Move ${index}` : \"Game Start\"}\r\n        </li>\r\n      );\r\n    });\r\n  }\r\n  /**\r\n   * a function that sets the current stepNumber to particular index in history\r\n   */\r\n  goBackInTime(i) {\r\n    this.setState({\r\n      history: this.state.history,\r\n      stepNumber: i,\r\n      isNextX: i % 2 ? false : true,\r\n    });\r\n  }\r\n  /*\r\n   *to calculate winner by checking horizontal vertical or diagonal line have same element if no winner returns null\r\n   */\r\n  calculateWinner(squares) {\r\n      console.log(`calculate winner called ${squares}`);\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    let winner = null;\r\n    lines.forEach((line) => {\r\n      if (winner) return;\r\n      let winnerFound =\r\n        squares[line[0]] === squares[line[1]] &&\r\n        squares[line[1]] === squares[line[2]] &&\r\n        (squares[line[0]] === \"X\" || squares[line[0]] === \"0\");\r\n        console.log(`value of winnerFound ${winnerFound} ${line}`);\r\n      if (winnerFound) winner = squares[line[0]];\r\n    });\r\n    console.log(`value of winner ${winner}`);\r\n    return winner;\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React from \"react\";\n// import logo from \"./logo.svg\";\n// import \"./App.css\";\n//can comment this out css provided by create-react-app by default\n\n// import \"./index.css\";\nimport Game from \"./Components/Game.jsx\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>Tic Tac Toe Game</p>\n      </header> */}\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}